package pojo;

import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import static org.testng.Assert.assertEquals;

public class PersistenceTest {
    Connection getConnection() throws SQLException {
        return DriverManager.getConnection("jdbc:h2:tcp://localhost/~/test", "sa", "");
    }

    @BeforeClass
    public void setup() {
        final String DROP = "DROP TABLE users IF EXISTS";
        final String CREATE = "CREATE TABLE users ("
                + "id BIGINT GENERATED BY DEFAULT AS IDENTITY "
                + "PRIMARY KEY, "
                + "name VARCHAR(256) NOT NULL)";
        try (Connection connection = getConnection()) {
            // clear out the old data, if any, so we know the state of the DB
            try (PreparedStatement ps =
                         connection.prepareStatement(DROP)) {
                ps.execute();
            }
            // create the table...
            try (PreparedStatement ps =
                         connection.prepareStatement(CREATE)) {
                ps.execute();
            }
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
    }
    public UserEntity saveUser(String name) {
        final String INSERT = "INSERT INTO users(name) VALUES (?)";
        UserEntity message = null;
        try (Connection connection = getConnection()) {
            try (PreparedStatement ps =
                         connection.prepareStatement(INSERT,
                                 Statement.RETURN_GENERATED_KEYS)) {
                ps.setString(1, name);
                ps.execute();
                try (ResultSet keys = ps.getGeneratedKeys()) {
                    if (!keys.next()) {
                        throw new SQLException("No generated keys");
                    }
                    message = new UserEntity(keys.getLong(1), name);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
        return message;
    }

    @Test
    public void readUser() {
        final String name = "Baran SÃ–NMEZ";
        UserEntity userEntity = saveUser(name);
        final String SELECT = "SELECT id, name FROM users";
        List<UserEntity> list = new ArrayList<>();
        try (Connection connection = getConnection()) {
            try (PreparedStatement ps =
                         connection.prepareStatement(SELECT)) {
                try (ResultSet rs = ps.executeQuery()) {
                    while (rs.next()) {
                        UserEntity newUser = new UserEntity();
                        newUser.setId(rs.getLong(1));
                        newUser.setName(rs.getString(2));
                        list.add(userEntity);
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
        assertEquals(list.size(), 1);
        for (UserEntity m : list) {
            System.out.println(m);
        }
        assertEquals(list.get(0), userEntity);
    }
}